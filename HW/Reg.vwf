/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("regEnable")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("regInputData")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("regInputData[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "regInputData";
}

SIGNAL("regInputData[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "regInputData";
}

SIGNAL("regInputData[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "regInputData";
}

SIGNAL("regInputData[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "regInputData";
}

SIGNAL("regInputData[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "regInputData";
}

SIGNAL("regInputData[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "regInputData";
}

SIGNAL("regInputData[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "regInputData";
}

SIGNAL("regInputData[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "regInputData";
}

SIGNAL("regOutput")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("regOutput[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regOutput";
}

SIGNAL("regOutput[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regOutput";
}

SIGNAL("regOutput[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regOutput";
}

SIGNAL("regOutput[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regOutput";
}

SIGNAL("regOutput[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regOutput";
}

SIGNAL("regOutput[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regOutput";
}

SIGNAL("regOutput[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regOutput";
}

SIGNAL("regOutput[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "regOutput";
}

SIGNAL("regSclr")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("regSset")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("regLoad")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 100;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("regEnable")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 280.0;
		LEVEL 1 FOR 720.0;
	}
}

TRANSITION_LIST("regInputData[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 550.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 7.513;
		LEVEL 0 FOR 9.0;
		LEVEL 1 FOR 4.213;
		LEVEL 0 FOR 5.3;
		LEVEL 1 FOR 3.974;
		LEVEL 0 FOR 1.465;
		LEVEL 1 FOR 3.4;
		LEVEL 0 FOR 8.876;
		LEVEL 1 FOR 2.466;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.2;
			LEVEL 1 FOR 2.466;
		}
		LEVEL 0 FOR 0.461;
		LEVEL 1 FOR 3.882;
		LEVEL 0 FOR 5.5;
		LEVEL 1 FOR 3.395;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 2.185;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 3.859;
		LEVEL 0 FOR 3.134;
		LEVEL 1 FOR 3.532;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.134;
			LEVEL 1 FOR 3.532;
		}
		LEVEL 0 FOR 3.134;
		LEVEL 1 FOR 5.128;
		LEVEL 0 FOR 11.6;
		LEVEL 1 FOR 5.153;
		LEVEL 0 FOR 2.067;
		LEVEL 1 FOR 1.266;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.067;
			LEVEL 1 FOR 1.266;
		}
		LEVEL 0 FOR 2.067;
		LEVEL 1 FOR 0.099;
		LEVEL 0 FOR 160.0;
	}
}

TRANSITION_LIST("regInputData[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 550.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 0.632;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.4;
			LEVEL 1 FOR 2.266;
		}
		LEVEL 0 FOR 4.4;
		LEVEL 1 FOR 8.521;
		LEVEL 0 FOR 10.4;
		LEVEL 1 FOR 2.715;
		LEVEL 0 FOR 1.881;
		LEVEL 1 FOR 3.1;
		LEVEL 0 FOR 6.322;
		LEVEL 1 FOR 1.299;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.034;
			LEVEL 1 FOR 1.299;
		}
		LEVEL 0 FOR 1.223;
		LEVEL 1 FOR 3.999;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.667;
			LEVEL 1 FOR 3.999;
		}
		LEVEL 0 FOR 2.974;
		LEVEL 1 FOR 1.533;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.8;
			LEVEL 1 FOR 1.533;
		}
		LEVEL 0 FOR 1.005;
		LEVEL 1 FOR 5.225;
		LEVEL 0 FOR 12.6;
		LEVEL 1 FOR 2.757;
		LEVEL 0 FOR 3.4;
		LEVEL 1 FOR 3.266;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.4;
			LEVEL 1 FOR 3.266;
		}
		LEVEL 0 FOR 3.4;
		LEVEL 1 FOR 2.686;
		LEVEL 0 FOR 1.919;
		LEVEL 1 FOR 2.999;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.667;
			LEVEL 1 FOR 2.999;
		}
		LEVEL 0 FOR 161.75;
	}
}

TRANSITION_LIST("regInputData[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 550.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 75.0;
		LEVEL 1 FOR 2.894;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.333;
			LEVEL 1 FOR 3.333;
		}
		LEVEL 0 FOR 3.333;
		LEVEL 1 FOR 1.694;
		LEVEL 0 FOR 4.4;
		LEVEL 1 FOR 2.266;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.4;
			LEVEL 1 FOR 2.266;
		}
		LEVEL 0 FOR 4.4;
		LEVEL 1 FOR 1.015;
		LEVEL 0 FOR 2.201;
		LEVEL 1 FOR 5.9;
		LEVEL 0 FOR 2.65;
		LEVEL 1 FOR 1.933;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.4;
			LEVEL 1 FOR 1.933;
		}
		LEVEL 0 FOR 0.65;
		LEVEL 1 FOR 1.508;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.75;
			LEVEL 1 FOR 2.25;
		}
		LEVEL 0 FOR 2.75;
		LEVEL 1 FOR 1.278;
		LEVEL 0 FOR 2.15;
		LEVEL 1 FOR 2.85;
		LEVEL 0 FOR 2.15;
		LEVEL 1 FOR 2.314;
		LEVEL 0 FOR 3.058;
		LEVEL 1 FOR 6.2;
		LEVEL 0 FOR 10.742;
		LEVEL 1 FOR 2.965;
		LEVEL 0 FOR 6.0;
		LEVEL 1 FOR 1.035;
		LEVEL 0 FOR 1.114;
		LEVEL 1 FOR 8.0;
		LEVEL 0 FOR 10.886;
		LEVEL 1 FOR 0.24;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.467;
			LEVEL 1 FOR 2.199;
		}
		LEVEL 0 FOR 4.467;
		LEVEL 1 FOR 1.961;
		LEVEL 0 FOR 160.0;
	}
}

TRANSITION_LIST("regInputData[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 555.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 77.153;
		LEVEL 1 FOR 9.8;
		LEVEL 0 FOR 3.789;
		LEVEL 1 FOR 1.199;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.134;
			LEVEL 1 FOR 1.199;
		}
		LEVEL 0 FOR 1.627;
		LEVEL 1 FOR 2.133;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.533;
			LEVEL 1 FOR 2.133;
		}
		LEVEL 0 FOR 4.301;
		LEVEL 1 FOR 2.077;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.2;
			LEVEL 1 FOR 2.8;
		}
		LEVEL 0 FOR 2.2;
		LEVEL 1 FOR 0.723;
		LEVEL 0 FOR 1.065;
		LEVEL 1 FOR 1.75;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.25;
			LEVEL 1 FOR 1.75;
		}
		LEVEL 0 FOR 3.103;
		LEVEL 1 FOR 1.366;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.967;
			LEVEL 1 FOR 1.366;
		}
		LEVEL 0 FOR 3.304;
		LEVEL 1 FOR 2.4;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.6;
			LEVEL 1 FOR 2.4;
		}
		LEVEL 0 FOR 0.762;
		LEVEL 1 FOR 1.9;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.1;
			LEVEL 1 FOR 1.9;
		}
		LEVEL 0 FOR 7.894;
		LEVEL 1 FOR 3.6;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 6.4;
			LEVEL 1 FOR 3.6;
		}
		LEVEL 0 FOR 1.19;
		LEVEL 1 FOR 1.442;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.15;
			LEVEL 1 FOR 2.85;
		}
		LEVEL 0 FOR 2.15;
		LEVEL 1 FOR 1.947;
		LEVEL 0 FOR 2.3;
		LEVEL 1 FOR 1.033;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.3;
			LEVEL 1 FOR 1.033;
		}
		LEVEL 0 FOR 2.3;
		LEVEL 1 FOR 2.133;
		LEVEL 0 FOR 2.8;
		LEVEL 1 FOR 2.2;
		LEVEL 0 FOR 2.8;
		LEVEL 1 FOR 0.562;
		LEVEL 0 FOR 160.0;
	}
}

TRANSITION_LIST("regInputData[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 550.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 85.0;
		LEVEL 1 FOR 2.183;
		LEVEL 0 FOR 9.0;
		LEVEL 1 FOR 13.153;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 8.83;
		LEVEL 0 FOR 5.2;
		LEVEL 1 FOR 4.328;
		LEVEL 0 FOR 2.1;
		LEVEL 1 FOR 1.233;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.1;
			LEVEL 1 FOR 1.233;
		}
		LEVEL 0 FOR 2.1;
		LEVEL 1 FOR 0.54;
		LEVEL 0 FOR 7.042;
		LEVEL 1 FOR 7.2;
		LEVEL 0 FOR 5.758;
		LEVEL 1 FOR 3.254;
		LEVEL 0 FOR 10.4;
		LEVEL 1 FOR 6.346;
		LEVEL 0 FOR 3.995;
		LEVEL 1 FOR 5.8;
		LEVEL 0 FOR 0.205;
		LEVEL 1 FOR 3.845;
		LEVEL 0 FOR 5.9;
		LEVEL 1 FOR 0.255;
		LEVEL 0 FOR 0.986;
		LEVEL 1 FOR 1.55;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.45;
			LEVEL 1 FOR 1.55;
		}
		LEVEL 0 FOR 2.464;
		LEVEL 1 FOR 1.168;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.1;
			LEVEL 1 FOR 1.9;
		}
		LEVEL 0 FOR 3.1;
		LEVEL 1 FOR 0.732;
		LEVEL 0 FOR 1.204;
		LEVEL 1 FOR 2.75;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.25;
			LEVEL 1 FOR 2.75;
		}
		LEVEL 0 FOR 161.046;
	}
}

TRANSITION_LIST("regInputData[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 560.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 82.047;
		LEVEL 1 FOR 4.9;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 5.1;
			LEVEL 1 FOR 4.9;
		}
		LEVEL 0 FOR 3.053;
		LEVEL 1 FOR 1.335;
		LEVEL 0 FOR 4.3;
		LEVEL 1 FOR 4.365;
		LEVEL 0 FOR 1.448;
		LEVEL 1 FOR 4.1;
		LEVEL 0 FOR 4.452;
		LEVEL 1 FOR 0.337;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 5.8;
			LEVEL 1 FOR 4.2;
		}
		LEVEL 0 FOR 5.8;
		LEVEL 1 FOR 3.863;
		LEVEL 0 FOR 2.857;
		LEVEL 1 FOR 1.6;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.4;
			LEVEL 1 FOR 1.6;
		}
		LEVEL 0 FOR 0.543;
		LEVEL 1 FOR 3.804;
		LEVEL 0 FOR 6.1;
		LEVEL 1 FOR 0.096;
		LEVEL 0 FOR 4.211;
		LEVEL 1 FOR 5.7;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 4.3;
			LEVEL 1 FOR 5.7;
		}
		LEVEL 0 FOR 0.089;
		LEVEL 1 FOR 2.003;
		LEVEL 0 FOR 6.5;
		LEVEL 1 FOR 1.497;
		LEVEL 0 FOR 0.916;
		LEVEL 1 FOR 1.8;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.2;
			LEVEL 1 FOR 1.8;
		}
		LEVEL 0 FOR 3.642;
		LEVEL 1 FOR 1.633;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.7;
			LEVEL 1 FOR 1.633;
		}
		LEVEL 0 FOR 4.837;
		LEVEL 1 FOR 3.2;
		LEVEL 0 FOR 4.376;
		LEVEL 1 FOR 3.4;
		LEVEL 0 FOR 164.53;
	}
}

TRANSITION_LIST("regInputData[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 550.0;
		LEVEL 1 FOR 25.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 73.193;
		LEVEL 1 FOR 7.8;
		LEVEL 0 FOR 9.373;
		LEVEL 1 FOR 1.999;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.334;
			LEVEL 1 FOR 1.999;
		}
		LEVEL 0 FOR 2.389;
		LEVEL 1 FOR 1.85;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.15;
			LEVEL 1 FOR 1.85;
		}
		LEVEL 0 FOR 4.344;
		LEVEL 1 FOR 1.999;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.667;
			LEVEL 1 FOR 1.999;
		}
		LEVEL 0 FOR 2.06;
		LEVEL 1 FOR 3.599;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 3.067;
			LEVEL 1 FOR 3.599;
		}
		LEVEL 0 FOR 3.064;
		LEVEL 1 FOR 2.957;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 5.2;
			LEVEL 1 FOR 4.8;
		}
		LEVEL 0 FOR 5.2;
		LEVEL 1 FOR 1.843;
		LEVEL 0 FOR 0.693;
		LEVEL 1 FOR 1.199;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.134;
			LEVEL 1 FOR 1.199;
		}
		LEVEL 0 FOR 4.129;
		LEVEL 1 FOR 2.266;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4.4;
			LEVEL 1 FOR 2.266;
		}
		LEVEL 0 FOR 1.715;
		LEVEL 1 FOR 2.111;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.4;
			LEVEL 1 FOR 2.6;
		}
		LEVEL 0 FOR 2.4;
		LEVEL 1 FOR 0.489;
		LEVEL 0 FOR 1.765;
		LEVEL 1 FOR 1.5;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.5;
			LEVEL 1 FOR 1.5;
		}
		LEVEL 0 FOR 161.735;
	}
}

TRANSITION_LIST("regInputData[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 555.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 35.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 89.975;
		LEVEL 1 FOR 3.5;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 6.5;
			LEVEL 1 FOR 3.5;
		}
		LEVEL 0 FOR 1.525;
		LEVEL 1 FOR 1.432;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.65;
			LEVEL 1 FOR 2.35;
		}
		LEVEL 0 FOR 2.65;
		LEVEL 1 FOR 0.918;
		LEVEL 0 FOR 0.418;
		LEVEL 1 FOR 4.8;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 5.2;
			LEVEL 1 FOR 4.8;
		}
		LEVEL 0 FOR 6.7;
		LEVEL 1 FOR 1.75;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.25;
			LEVEL 1 FOR 1.75;
		}
		LEVEL 0 FOR 6.139;
		LEVEL 1 FOR 3.9;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 6.1;
			LEVEL 1 FOR 3.9;
		}
		LEVEL 0 FOR 1.654;
		LEVEL 1 FOR 9.6;
		LEVEL 0 FOR 14.737;
		LEVEL 1 FOR 4.6;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 5.4;
			LEVEL 1 FOR 4.6;
		}
		LEVEL 0 FOR 3.143;
		LEVEL 1 FOR 1.65;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3.35;
			LEVEL 1 FOR 1.65;
		}
		LEVEL 0 FOR 0.909;
		LEVEL 1 FOR 1.127;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2.35;
			LEVEL 1 FOR 2.65;
		}
		LEVEL 0 FOR 2.35;
		LEVEL 1 FOR 3.383;
		LEVEL 0 FOR 6.2;
		LEVEL 1 FOR 1.94;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("regOutput[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("regOutput[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("regOutput[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("regOutput[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("regOutput[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("regOutput[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("regOutput[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("regOutput[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("regSclr")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 90.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 500.0;
	}
}

TRANSITION_LIST("regSset")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 550.0;
	}
}

TRANSITION_LIST("regLoad")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 570.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 130.0;
		LEVEL 1 FOR 70.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 70.0;
		LEVEL 0 FOR 30.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "regEnable";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "regInputData";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
	CHILDREN = 3, 4, 5, 6, 7, 8, 9, 10;
}

DISPLAY_LINE
{
	CHANNEL = "regInputData[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "regInputData[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "regInputData[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "regInputData[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "regInputData[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "regInputData[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "regInputData[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "regInputData[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Signed;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "regOutput";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
	CHILDREN = 12, 13, 14, 15, 16, 17, 18, 19;
}

DISPLAY_LINE
{
	CHANNEL = "regOutput[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "regOutput[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "regOutput[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "regOutput[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "regOutput[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "regOutput[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "regOutput[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "regOutput[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "regSclr";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "regSset";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "regLoad";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
